/* https://www.acmicpc.net/problem/14500 */
/* 2021-02-05 */

/*
주어진 보드 위에 도형을 놓았을 때, 도형이 놓인 곳의 값들의 합의 최대값을 구하는 문제이다.
이때 주의해야 할 것은 도형은 회전과 대칭이 된다는 것이다
종이의 처음부터 끝까지 순회하며 도형이 종이 안에 있는 경우에 값의 합을 구한 후, 그 합들 중 최대값을 구한다.
*/

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int N, M;	//가로, 세로 (4 <= N, M <= 500)
int map[500][500];
int tetro[19][4][2] = {
	//첫 번째 테트로미노(파란색)
	{{0, 0}, {0, 1}, {0, 2}, {0, 3}},
	{{0, 0}, {1, 0}, {2, 0}, {3, 0}},
	
	//두 번째 테트로미노(노란색)
	{{0, 0}, {0, 1}, {1, 0}, {1, 1}},
	
	//세 번째 테트로미노(주황색)
	{{0, 0}, {1, 0}, {2, 0}, {2, 1}},
	{{0, 0}, {0, 1}, {0, 2}, {-1, 2}},
	{{0, 0}, {0, 1}, {1, 1}, {2, 1}},
	{{0, 0}, {1, 0}, {0, 1}, {0, 2}},
	{{0, 0}, {1, 0}, {2, 0}, {2, -1}},
	{{0, 0}, {1, 0}, {1, 1}, {1, 2}},
	{{0, 0}, {1, 0}, {2, 0}, {0, 1}},
	{{0, 0}, {0, 1}, {0, 2}, {1, 2}},

	//네 번째 테트로미노(초록색)
	{{0, 0}, {1, 0}, {1, 1}, {2, 1}},
	{{0, 0}, {0, 1}, {-1, 1}, {-1, 2}},
	{{0, 0}, {1, 0}, {0, 1}, {-1, 1}},
	{{0, 0}, {0, 1}, {1, 1}, {1, 2}},
	
	//다섯번째 테트로미노(핑크색)
	{{0, 0}, {0, 1}, {0, 2}, {1, 1}},
	{{0, 0}, {0, 1}, {1, 1}, {-1, 1}},
	{{0, 0}, {0, 1}, {0, 2}, {-1, 1}},
	{{0, 0}, {1, 0}, {2, 0}, {1, 1}},
};

int main() {

	cin >> N >> M;

	for (int y = 0; y < N; y++) {
		for (int x = 0; x < M; x++) {
			cin >> map[y][x];
		}
	}

	int res = 0;
	for (int i = 0; i < 19; i++) {
		for (int y = 0; y < N; y++) {
			for (int x = 0; x < M; x++) {
				int sum = 0;
				for (int t = 0; t < 4; t++) {
					int ny = y + tetro[i][t][0];
					int nx = x + tetro[i][t][1];
					if (ny < 0 || nx < 0 || ny >= N || nx >= M) {
						sum = 0;
						break;
					} //종이 안에 있지 않은 경우
					sum += map[ny][nx];
				}
				res = max(res, sum);
			}
		}
	}

	cout << res << endl;

	return 0;
}
